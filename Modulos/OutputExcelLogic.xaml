<Activity mc:Ignorable="sap sap2010" x:Class="OutputExcelLogic" VisualBasic.Settings="{x:Null}" sap:VirtualizedContainerService.HintSize="1369,8403" sap2010:WorkflowViewState.IdRef="OutputExcelLogic_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:njl="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ue="clr-namespace:UiPath.Excel;assembly=UiPath.Excel.Activities" xmlns:ueab="clr-namespace:UiPath.Excel.Activities.Business;assembly=UiPath.Excel.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>UiPath.Web.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>UiPath.Activities.System.Arrays</x:String>
      <x:String>UiPath.Activities.System.Collections</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>UiPath.Database.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>netstandard</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Collections.Specialized</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence DisplayName="OutputExcelLogic" sap:VirtualizedContainerService.HintSize="592,8338" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="pokemon_dt" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="data_query" />
      <Variable x:TypeArguments="x:String" Name="ruta_excel" />
      <Variable x:TypeArguments="s:String[]" Name="moves" />
      <Variable x:TypeArguments="x:Int32" Name="moves_idx" />
      <Variable x:TypeArguments="s:String[]" Name="types" />
      <Variable x:TypeArguments="x:Int32" Name="types_idx" />
      <Variable x:TypeArguments="x:Int32" Name="type_idx" />
      <Variable x:TypeArguments="x:Int32" Name="move_idx" />
      <Variable x:TypeArguments="x:Int32" Name="abilities_idx" />
      <Variable x:TypeArguments="njl:JArray" Name="abilities" />
      <Variable x:TypeArguments="x:Int32" Name="ability_idx" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="cabeceras" />
      <Variable x:TypeArguments="x:String" Name="pokemon_name" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:MultipleAssign sap2010:Annotation.AnnotationText="- data_query: las columnas que se le pedirán a la BBDD&#xA;- cabeceras: las cabeceras que hay en la DT&#xA;- ruta_excel: la ruta donde el Excel va a estar almacenado&#xA;- pokemon_name: almacena el nombre del pokemon" DisplayName="Asignación múltiple" sap:VirtualizedContainerService.HintSize="530,266" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="scg:List(x:String)">[data_query]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="scg:List(x:String)">[New List (Of String) From {"pokemon_id", "pokemon_name", "abilities", "types", "base_hp", "base_att", "base_def", "base_spa", "base_spd", "base_speed", "moves", "height", "weight"}]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_7">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="scg:List(x:String)">[cabeceras]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="scg:List(x:String)">[data_query]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_6">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[ruta_excel]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[".\resources\input_pokemon_" + DateTime.Now.ToString("yyyyMMdd_HHmmss") + ".xlsx"]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_9">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[pokemon_name]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">ERROR</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:MultipleAssign>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Modulos\SelectfromDatabase.xaml - Invocar archivo de flujo de trabajo" sap:VirtualizedContainerService.HintSize="530,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="Modulos\SelectfromDatabase.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="scg:List(x:String)" x:Key="in_dataToSelect">[data_query]</InArgument>
        <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dt">[pokemon_dt]</OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <If Condition="[cabeceras.Contains(&quot;pokemon_name&quot;)]" DisplayName="Necesito al menos un el nombre del pokémon" sap:VirtualizedContainerService.HintSize="530,1230" sap2010:WorkflowViewState.IdRef="If_13">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="476,870" sap2010:WorkflowViewState.IdRef="Sequence_69">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:GetRowItem Column="{x:Null}" ColumnIndex="{x:Null}" ColumnName="pokemon_name" DisplayName="Obtener el nombre" sap:VirtualizedContainerService.HintSize="434,187" sap2010:WorkflowViewState.IdRef="GetRowItem_4" Row="[pokemon_dt.Rows(0)]">
            <ui:GetRowItem.Value>
              <OutArgument x:TypeArguments="x:String">[pokemon_name]</OutArgument>
            </ui:GetRowItem.Value>
          </ui:GetRowItem>
          <Assign DisplayName="Poner la primera letra en mayúscula" sap:VirtualizedContainerService.HintSize="434,81" sap2010:WorkflowViewState.IdRef="Assign_50">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[pokemon_name]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[pokemon_name.Substring(0, 1).ToUpper() + pokemon_name.Substring(1)]</InArgument>
            </Assign.Value>
          </Assign>
          <ui:RemoveDataColumn Column="{x:Null}" ColumnIndex="{x:Null}" ColumnName="pokemon_name" DataTable="[pokemon_dt]" DisplayName="Quitar la columna que tiene el nombre" sap:VirtualizedContainerService.HintSize="434,186" sap2010:WorkflowViewState.IdRef="RemoveDataColumn_2" />
          <InvokeMethod sap2010:Annotation.AnnotationText="Como en la DT ya no está la columna &quot;pokemon_name&quot;, hay que actualizar esta lista para que tampoco esté" DisplayName="Actualizar la lista &quot;cabeceras&quot;" sap:VirtualizedContainerService.HintSize="434,208" sap2010:WorkflowViewState.IdRef="InvokeMethod_7" MethodName="Remove">
            <InvokeMethod.TargetObject>
              <InArgument x:TypeArguments="scg:List(x:String)">[cabeceras]</InArgument>
            </InvokeMethod.TargetObject>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <InArgument x:TypeArguments="x:String">pokemon_name</InArgument>
          </InvokeMethod>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap:VirtualizedContainerService.HintSize="376,178" sap2010:WorkflowViewState.IdRef="Sequence_70">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Throw DisplayName="Lanzar excepción" Exception="[New Exception(&quot;No hay ningún nombre de pokemon&quot;)]" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_1" />
        </Sequence>
      </If.Else>
    </If>
    <If Condition="[cabeceras.Contains(&quot;abilities&quot;)]" DisplayName="Si se ha pedido &quot;abilities&quot;, crea una columna nueva &quot;ab_hidden&quot;" sap:VirtualizedContainerService.HintSize="530,987" sap2010:WorkflowViewState.IdRef="If_9">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="476,805" sap2010:WorkflowViewState.IdRef="Sequence_61">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign DisplayName="Obtener el índice de la columna &quot;abilities&quot;" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_49">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[abilities_idx]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[cabeceras.IndexOf("abilities")]</InArgument>
            </Assign.Value>
          </Assign>
          <ui:AddDataColumn x:TypeArguments="x:String" AllowDBNull="{x:Null}" AutoIncrement="{x:Null}" Column="{x:Null}" DefaultValue="{x:Null}" MaxLength="{x:Null}" Unique="{x:Null}" ColumnName="ab_hidden" DataTable="[pokemon_dt]" DisplayName="Añadir la columna &quot;ab_hidden&quot;" sap:VirtualizedContainerService.HintSize="434,186" sap2010:WorkflowViewState.IdRef="AddDataColumn`1_14" />
          <InvokeMethod DisplayName="Mover la columna &quot;ab_hidden&quot; al lado de &quot;abilities&quot;" sap:VirtualizedContainerService.HintSize="434,136" sap2010:WorkflowViewState.IdRef="InvokeMethod_4" MethodName="SetOrdinal">
            <InvokeMethod.TargetObject>
              <InArgument x:TypeArguments="sd:DataColumn">[pokemon_dt.Columns("ab_hidden")]</InArgument>
            </InvokeMethod.TargetObject>
            <InArgument x:TypeArguments="x:Int32">[abilities_idx + 1]</InArgument>
          </InvokeMethod>
          <InvokeMethod sap2010:Annotation.AnnotationText="Como en la DT hay una columna nueva, hay que actualizar de nuevo esta lista para reflejar este cambio" DisplayName="Actualizar la lista &quot;cabeceras&quot;" sap:VirtualizedContainerService.HintSize="434,193" sap2010:WorkflowViewState.IdRef="InvokeMethod_5" MethodName="Insert">
            <InvokeMethod.TargetObject>
              <InArgument x:TypeArguments="scg:List(x:String)">[cabeceras]</InArgument>
            </InvokeMethod.TargetObject>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <InArgument x:TypeArguments="x:Int32">[abilities_idx]</InArgument>
            <InArgument x:TypeArguments="x:String">ab_hidden</InArgument>
          </InvokeMethod>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_62" />
      </If.Else>
    </If>
    <If Condition="[cabeceras.Contains(&quot;height&quot;)]" DisplayName="Si se ha pedido &quot;height&quot;, cambiar su nombre" sap:VirtualizedContainerService.HintSize="530,352" sap2010:WorkflowViewState.IdRef="If_14">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="476,170" sap2010:WorkflowViewState.IdRef="Sequence_75">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign DisplayName="Añadir &quot;(cm)&quot; al nombre de la columna" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_54">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[pokemon_dt.Columns("height").ColumnName]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">height (cm)</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_76" />
      </If.Else>
    </If>
    <If Condition="[cabeceras.Contains(&quot;weight&quot;)]" DisplayName="Si se ha pedido &quot;height&quot;, cambiar su nombre" sap:VirtualizedContainerService.HintSize="530,352" sap2010:WorkflowViewState.IdRef="If_15">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="476,170" sap2010:WorkflowViewState.IdRef="Sequence_77">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign DisplayName="Asignar" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_55">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[pokemon_dt.Columns("weight").ColumnName]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">weight (kg)</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_78" />
      </If.Else>
    </If>
    <ui:WriteRange StartingCell="{x:Null}" AddHeaders="True" sap2010:Annotation.AnnotationText="Las columnas que tengan más de una fila se actualizarán a continuación" DataTable="[pokemon_dt]" DisplayName="Meter la DT en el Excel" sap:VirtualizedContainerService.HintSize="530,158" sap2010:WorkflowViewState.IdRef="WriteRange_2" SheetName="[pokemon_name]" WorkbookPath="[ruta_excel]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:WriteRange>
    <If Condition="[cabeceras.Contains(&quot;abilities&quot;)]" DisplayName="Si se ha pedido &quot;abilities&quot;" sap:VirtualizedContainerService.HintSize="530,1550" sap2010:WorkflowViewState.IdRef="If_10">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="452,1368" sap2010:WorkflowViewState.IdRef="Sequence_63">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:DeserializeJsonArray sap2010:Annotation.AnnotationText="Aquí saco la única celda que está dentro de la columna &quot;abilities&quot;. Luego lo separo a un JArray" DisplayName="Obtener el JArray de &quot;abilities&quot;" sap:VirtualizedContainerService.HintSize="410,102" sap2010:WorkflowViewState.IdRef="DeserializeJsonArray_2" JsonArray="[abilities]" JsonString="[pokemon_dt.AsEnumerable().Aggregate(&quot;&quot;, Function (a, r) a + r.Field(Of String)(&quot;abilities&quot;).ToString)]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:DeserializeJsonArray>
          <ui:ForEach x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Selecciono la propiedad &quot;name&quot; de cada JObject del JArray &quot;abilities&quot;.&#xA;El resultado es un IEnumerable" CurrentIndex="[ability_idx]" DisplayName="Rellenar la columna &quot;abilities&quot;" sap:VirtualizedContainerService.HintSize="410,504" sap2010:WorkflowViewState.IdRef="ForEach`1_21" Values="[abilities.Select(Function (a) a(&quot;name&quot;).ToString)]">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="x:String">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="x:String" Name="ab_name" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Cuerpo" sap:VirtualizedContainerService.HintSize="376,276" sap2010:WorkflowViewState.IdRef="Sequence_55">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:WriteCell sap2010:Annotation.AnnotationText="La celda que relleno tiene las siguientes coordenadas:&#xA;- La columna donde está &quot;ab_name&quot; (&quot;abilities_idx&quot;), y como lo tengo que pasar a letra, le sumo el código ASCII de la &quot;A&quot; que es 65" Cell="[chr(abilities_idx + 65) + (ability_idx + 2).ToString]" DisplayName="Añadir ab_name a la columna" sap:VirtualizedContainerService.HintSize="334,188" sap2010:WorkflowViewState.IdRef="WriteCell_4" SheetName="[pokemon_name]" Text="[ab_name]" WorkbookPath="[ruta_excel]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteCell>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ForEach>
          <ui:ForEach x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Selecciono la propiedad &quot;hidden&quot; de cada JObject del JArray &quot;abilities&quot;.&#xA;El resultado es un IEnumerable" CurrentIndex="[ability_idx]" DisplayName="Rellenar la columna &quot;ab_hidden&quot;" sap:VirtualizedContainerService.HintSize="410,594" sap2010:WorkflowViewState.IdRef="ForEach`1_22" Values="[abilities.Select(Function (a) a(&quot;hidden&quot;).ToString)]">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="x:String">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="x:String" Name="ab_hidden" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Cuerpo" sap:VirtualizedContainerService.HintSize="376,351" sap2010:WorkflowViewState.IdRef="Sequence_59">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:WriteCell sap2010:Annotation.AnnotationText="La celda que relleno tiene las siguientes coordenadas:&#xA;- La columna donde está &quot;ab_hidden&quot;, que es la que está a la derecha de &quot;abilities_idx&quot; (por lo que &quot;abilities_idx + 1), y como lo tengo que pasar a letra, le sumo el código ASCII de la &quot;A&quot; que es 65&#xA;- La fila es el índice de la iteración actual de este bucle (&quot;ability_idx&quot;) empezando en 0. Como las filas en Excel empieza desde 1, le sumo 1, y como la primera fila es la cabecera, le sumo otro 1" Cell="[chr(abilities_idx + 65 + 1) + (ability_idx + 2).ToString]" DisplayName="Añadir ab_hidden a la columna" sap:VirtualizedContainerService.HintSize="334,263" sap2010:WorkflowViewState.IdRef="WriteCell_5" SheetName="[pokemon_name]" Text="[ab_hidden]" WorkbookPath="[ruta_excel]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteCell>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ForEach>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_64" />
      </If.Else>
    </If>
    <If Condition="[cabeceras.Contains(&quot;types&quot;)]" DisplayName="Si se ha pedido &quot;types&quot;" sap:VirtualizedContainerService.HintSize="530,1078" sap2010:WorkflowViewState.IdRef="If_11">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="476,896" sap2010:WorkflowViewState.IdRef="Sequence_65">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap2010:Annotation.AnnotationText="Aquí saco la única celda que está dentro de la columna &quot;types&quot;. Luego lo separo a un Array" DisplayName="De string a array -&gt; &quot;types&quot;" sap:VirtualizedContainerService.HintSize="434,124" sap2010:WorkflowViewState.IdRef="Assign_41">
            <Assign.To>
              <OutArgument x:TypeArguments="s:String[]">[types]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="s:String[]">[pokemon_dt.Rows(0).Item("types").ToString.Split(",", StringSplitOptions.RemoveEmptyEntries)]</InArgument>
            </Assign.Value>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Assign>
          <Assign DisplayName="Obtener el índice de la columna &quot;types&quot;" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_42">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[types_idx]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[cabeceras.IndexOf("types")]</InArgument>
            </Assign.Value>
          </Assign>
          <ui:ForEach x:TypeArguments="x:String" CurrentIndex="[type_idx]" DisplayName="Rellenar la columna &quot;abilities&quot;" sap:VirtualizedContainerService.HintSize="434,522" sap2010:WorkflowViewState.IdRef="ForEach`1_16" Values="[types]">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="x:String">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="x:String" Name="type" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Cuerpo" sap:VirtualizedContainerService.HintSize="376,336" sap2010:WorkflowViewState.IdRef="Sequence_46">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:WriteCell sap2010:Annotation.AnnotationText="La celda que relleno tiene las siguientes coordenadas:&#xA;- La columna donde está &quot;types&quot; (&quot;types_idx&quot;), y como lo tengo que pasar a letra, le sumo el código ASCII de la &quot;A&quot; que es 65&#xA;- La fila es el índice de la iteración actual de este bucle (&quot;type_idx&quot;) empezando en 0. Como las filas en Excel empieza desde 1, le sumo 1, y como la primera fila es la cabecera, le sumo otro 1" Cell="[chr(types_idx + 65) + (type_idx + 2).ToString]" DisplayName="Añadir type a la columna" sap:VirtualizedContainerService.HintSize="334,248" sap2010:WorkflowViewState.IdRef="WriteCell_1" SheetName="[pokemon_name]" Text="[type]" WorkbookPath="[ruta_excel]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteCell>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ForEach>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_66" />
      </If.Else>
    </If>
    <If Condition="[cabeceras.Contains(&quot;moves&quot;)]" DisplayName="Si se ha pedido &quot;moves&quot;" sap:VirtualizedContainerService.HintSize="530,1078" sap2010:WorkflowViewState.IdRef="If_12">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="476,896" sap2010:WorkflowViewState.IdRef="Sequence_67">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap2010:Annotation.AnnotationText="Aquí saco la única celda que está dentro de la columna &quot;moves&quot;. Luego cambio cada &quot;-&quot; por un espacio y lo separo a un Array" DisplayName="De string a array -&gt; &quot;moves&quot;" sap:VirtualizedContainerService.HintSize="434,124" sap2010:WorkflowViewState.IdRef="Assign_39">
            <Assign.To>
              <OutArgument x:TypeArguments="s:String[]">[moves]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="s:String[]">[pokemon_dt.Rows(0).Item("moves").ToString.Replace("-"," ").Split(",", StringSplitOptions.RemoveEmptyEntries)]</InArgument>
            </Assign.Value>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Assign>
          <Assign DisplayName="Obtener el índice de la columna &quot;moves&quot;" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_40">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[moves_idx]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[cabeceras.IndexOf("moves")]</InArgument>
            </Assign.Value>
          </Assign>
          <ui:ForEach x:TypeArguments="x:String" CurrentIndex="[move_idx]" DisplayName="Para cada" sap:VirtualizedContainerService.HintSize="434,522" sap2010:WorkflowViewState.IdRef="ForEach`1_17" Values="[moves]">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="x:String">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="x:String" Name="move" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Cuerpo" sap:VirtualizedContainerService.HintSize="376,336" sap2010:WorkflowViewState.IdRef="Sequence_47">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:WriteCell sap2010:Annotation.AnnotationText="La celda que relleno tiene las siguientes coordenadas:&#xA;- La columna donde está &quot;moves&quot; (&quot;moves_idx&quot;), y como lo tengo que pasar a letra, le sumo el código ASCII de la &quot;A&quot; que es 65&#xA;- La fila es el índice de la iteración actual de este bucle (&quot;move_idx&quot;) empezando en 0. Como las filas en Excel empieza desde 1, le sumo 1, y como la primera fila es la cabecera, le sumo otro 1" Cell="[chr(moves_idx + 65) + (move_idx + 2).ToString]" DisplayName="Añadir move a la columna" sap:VirtualizedContainerService.HintSize="334,248" sap2010:WorkflowViewState.IdRef="WriteCell_2" SheetName="[pokemon_name]" Text="[move]" WorkbookPath="[ruta_excel]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteCell>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ForEach>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_68" />
      </If.Else>
    </If>
    <ueab:SequenceX DisplayName="Ámbito del proceso de Excel único" sap:VirtualizedContainerService.HintSize="530,663" sap2010:WorkflowViewState.IdRef="SequenceX_3">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" sap2010:Annotation.AnnotationText="Esta era la única manera para ajustar el ancho de las columnas del Excel fácilmente" CreateNewFile="False" DisplayName="Utilice el archivo de Excel" sap:VirtualizedContainerService.HintSize="468,552" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_2" ResizeWindow="None" TemplatePath="plantilla.xlsx" UseTemplate="True" WorkbookPath="[ruta_excel]">
        <ueab:ExcelApplicationCard.Body>
          <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
            </ActivityAction.Argument>
            <ueab:AutoFitX sap2010:Annotation.AnnotationText="El rango se compone de:&#xA;- Arriba a la derecha (&quot;A1&quot;)&#xA;* Hasta el número de columnas que haya (sumando 65 (&quot;A&quot;) para convertirlo en una letra con &quot;chr()&quot;)&#xA;* Hasta el número de filas de las columna que más filas tenga (más 1 por la cabecera)" Columns="True" DisplayName="Rango de ajuste automático" sap:VirtualizedContainerService.HintSize="434,218" sap2010:WorkflowViewState.IdRef="AutoFitX_2" Range="[Excel.Sheet(pokemon_name).Range(&quot;A1:&quot; + chr(cabeceras.Count + 65) + (Math.Max(abilities.Count, Math.Max(types.Length, moves.Length)) + 1).ToString)]" Rows="False">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ueab:AutoFitX>
          </ActivityAction>
        </ueab:ExcelApplicationCard.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ueab:ExcelApplicationCard>
    </ueab:SequenceX>
  </Sequence>
</Activity>